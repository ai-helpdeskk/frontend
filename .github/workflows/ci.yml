# .github/workflows/ci.yml
name: CI - Build and Push File Service

on:
  push:
    branches: [ main, develop ]
    paths:
      - '**'
      - '!README.md'
      - '!.github/workflows/cd.yml'
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  REGISTRY: docker.io
  IMAGE_NAME: samitsinghhh/file-service

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
        
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y poppler-utils
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio pytest-cov httpx
        
    - name: Run linting
      run: |
        pip install flake8
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        
    - name: Run tests
      run: |
        # Create a simple test if none exist
        if [ ! -f "test_main.py" ]; then
          cat > test_main.py << 'EOF'
import pytest
from fastapi.testclient import TestClient
from main import app

client = TestClient(app)

def test_read_root():
    response = client.get("/")
    assert response.status_code == 200
    assert "File Service is running" in response.json()["message"]

def test_health_check():
    response = client.get("/health")
    assert response.status_code == 200
    assert response.json()["status"] == "healthy"

def test_get_files_empty():
    response = client.get("/files/test_session")
    assert response.status_code in [200, 500]  # 500 if no DB connection
EOF
        fi
        
        pytest test_main.py -v --cov=main --cov-report=xml || true
        
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
      continue-on-error: true

  build-and-push:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name != 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

    - name: Wait for image availability
      run: |
        echo "Waiting for image to be available in registry..."
        sleep 30
        
        IMAGE_TAG="${{ github.ref_name }}-${{ github.sha }}"
        echo "Checking for image: ${{ env.IMAGE_NAME }}:${IMAGE_TAG}"
        
        for i in {1..5}; do
          if docker manifest inspect ${{ env.IMAGE_NAME }}:${IMAGE_TAG} > /dev/null 2>&1; then
            echo "✅ Image verified successfully"
            break
          else
            echo "⏳ Attempt $i: Image not yet available, waiting..."
            sleep 15
          fi
          
          if [ $i -eq 5 ]; then
            echo "❌ Image verification failed after 5 attempts"
            exit 1
          fi
        done

    - name: Update deployment manifest
      if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
      env:
        GITHUB_TOKEN: ${{ secrets.MANIFEST_REPO_TOKEN }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        set -e
        
        git clone https://github.com/${{ github.repository_owner }}/k8s-manifests.git
        cd k8s-manifests
        
        git config user.name "GitHub Actions Bot"
        git config user.email "actions@github.com"
        
        # Find the deployment file
        DEPLOYMENT_FILE=""
        POSSIBLE_PATHS=(
          "k8s/deployments/file-service-deployment.yaml"
          "deployments/file-service-deployment.yaml"
          "manifests/file-service-deployment.yaml"
        )
        
        for path in "${POSSIBLE_PATHS[@]}"; do
          if [ -f "$path" ]; then
            DEPLOYMENT_FILE="$path"
            echo "✅ Found deployment file at: $DEPLOYMENT_FILE"
            break
          fi
        done
        
        if [ -z "$DEPLOYMENT_FILE" ]; then
          echo "❌ ERROR: file-service-deployment.yaml not found!"
          find . -name "*.yaml" -type f | grep -i file || echo "No file service files found"
          exit 1
        fi
        
        # Update image tag
        cp "$DEPLOYMENT_FILE" "${DEPLOYMENT_FILE}.backup"
        NEW_IMAGE="${{ env.IMAGE_NAME }}:${{ github.ref_name }}-${IMAGE_TAG}"
        sed -i "s|samitsinghhh/file-service:.*|${NEW_IMAGE}|g" "$DEPLOYMENT_FILE"
        
        echo "=== Updated Image Configuration ==="
        grep -n "image:" "$DEPLOYMENT_FILE"
        
        if diff "$DEPLOYMENT_FILE" "${DEPLOYMENT_FILE}.backup" > /dev/null; then
          echo "ℹ️ No changes needed - image already up to date"
          exit 0
        fi
        
        git add "$DEPLOYMENT_FILE"
        git commit -m "🚀 Update file-service image to ${{ github.ref_name }}-${IMAGE_TAG}"
        git push origin main
        
        echo "✅ Successfully updated deployment manifest"

    - name: Trigger deployment
      if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
      run: |
        if [ "${{ github.ref }}" = "refs/heads/main" ]; then
          ENV="production"
        else
          ENV="staging"
        fi
        
        echo "🚀 Triggering deployment for $ENV environment"
        
        curl -X POST \
          -H "Authorization: token ${{ secrets.MANIFEST_REPO_TOKEN }}" \
          -H "Accept: application/vnd.github.v3+json" \
          https://api.github.com/repos/${{ github.repository_owner }}/k8s-manifests/dispatches \
          -d "{\"event_type\":\"deploy-file-service\",\"client_payload\":{\"environment\":\"$ENV\",\"service\":\"file-service\",\"image_tag\":\"${{ github.ref_name }}-${{ github.sha }}\",\"repository\":\"${{ github.repository }}\"}}"
        
        echo "✅ Deployment trigger sent successfully"

    - name: Job summary
      if: always()
      run: |
        echo "## 📁 File Service CI/CD Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- **Repository**: ${{ github.repository }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Image**: ${{ env.IMAGE_NAME }}:${{ github.ref_name }}-${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Status**: ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        if [ "${{ job.status }}" = "success" ]; then
          echo "✅ **All steps completed successfully!**" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Pipeline failed. Check the logs above.**" >> $GITHUB_STEP_SUMMARY
        fi
